#line 2 "flex-chapel.cpp"

#line 4 "flex-chapel.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[349] =
    {   0,
        0,    0,    0,    0,  134,  132,  128,  129,   88,  126,
       83,  105,   89,  127,  113,  114,  103,  101,  111,  102,
      112,  104,  123,  123,  109,  110,   99,   66,  100,  121,
      122,  115,  116,   91,   65,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  118,   90,  119,   92,  117,
       96,   72,   86,   73,  108,   69,  107,   67,  106,   68,
       84,   82,  131,  130,   70,    0,  123,    0,    0,    0,
        0,  124,   93,   97,    0,   95,   80,   98,   94,  122,
       75,  122,  122,  122,  122,  122,    5,  122,  122,  122,

      122,   14,  122,  122,  122,  122,   22,   23,  122,  122,
      122,  122,  122,  122,  122,  122,   36,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,   74,   87,   76,
       71,   85,    0,  125,    0,  123,    0,   82,  123,  123,
       78,   81,  120,   79,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
       20,  122,  122,  122,  122,  122,  122,   30,  122,  122,
       33,   34,  122,  122,   38,  122,  122,  122,  122,  122,
       46,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,   58,   59,  122,  122,  122,  122,   40,   77,
        0,   82,    0,   82,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,   16,   17,
      122,  122,  122,  122,  122,  122,   27,  122,  122,  122,
      122,  122,  122,  122,  122,   43,  122,  122,  122,   48,
      122,  122,  122,  122,  122,   54,   55,   56,  122,   60,
      122,  122,   63,  122,  122,    1,  122,    3,    4,    6,
      122,  122,  122,   10,  122,  122,  122,  122,  122,  122,
      122,   24,  122,   26,   28,  122,   31,  122,  122,  122,
       39,  122,  122,  122,  122,  122,  122,  122,  122,  122,

       57,   61,   62,   64,  122,    2,  122,  122,    9,  122,
       12,  122,   15,   18,   19,   21,   25,   29,   32,   35,
      122,   41,   44,   45,   47,   49,   50,   51,   52,  122,
      122,    7,  122,  122,   13,  122,  122,  122,    8,   11,
      122,  122,  122,   37,   53,  122,   42,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   29,   29,   31,   29,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   32,
       32,   32,   32,   32,   32,   32,   32,   34,   32,   32,
       35,    1,   36,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   32,   48,   49,   50,   51,
       52,   53,   32,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    2,    2,    2,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[351] =
    {   0,
        0,    0,  380,  379,  441,  444,  444,  444,  414,  444,
      444,  413,   58,  444,  444,  444,   55,   56,  444,   53,
       54,   59,   69,   75,  444,  444,   79,   81,   84,  444,
        0,  444,  444,  412,  399,   31,   70,   49,   76,   74,
      384,   76,   94,  383,   92,   85,   39,  391,  106,   69,
       97,  394,  104,  385,  384,  444,   91,  444,  444,  444,
      444,  444,  404,  444,  403,  444,  444,  444,  444,  444,
      411,  149,  444,  444,  444,  154,  162,  137,  192,  141,
        0,  444,  401,  399,  398,  444,  444,  444,  398,    0,
      444,  370,  375,  369,  375,  376,    0,  379,  114,  368,

      377,  365,  359,  356,   87,  358,    0,  146,  368,  137,
      354,  368,  366,  348,  357,  358,    0,  358,  347,  348,
      139,  159,  362,  140,  349,  360,  358,  346,  353,  342,
      347,  350,  338,  143,  335,  347,  336,  444,  362,  444,
      444,  444,  202,  444,  211,  200,  215,  219,  223,  340,
      444,  444,  444,  444,  332,  340,  334,  336,  343,  326,
      337,  327,  173,  335,  324,  337,  332,  324,  321,  329,
      332,  327,  322,  311,  313,  323,  325,    0,  325,  306,
        0,    0,  311,  318,    0,  321,  314,  317,  305,  299,
        0,  298,  303,  310,  305,  306,  296,  307,  307,  296,

      303,  293,    0,    0,  148,  295,  297,  293,    0,  444,
      229,  233,  237,  241,  294,  289,  292,  287,  289,  281,
      290,  280,  286,  276,  284,  274,  276,  281,    0,    0,
      273,  272,  276,  264,  272,  266,    0,  272,  278,  270,
      269,  270,  262,  265,  264,    0,  259,  271,  257,    0,
      269,  270,  259,  252,  254,    0,    0,    0,  254,    0,
      261,  260,    0,  260,  251,    0,  259,    0,    0,    0,
      252,  259,  252,    0,  245,  252,  251,  242,  236,  240,
      238,    0,  243,    0,    0,  246,    0,  241,  227,  223,
        0,  242,  237,  235,  226,  220,  226,  231,  230,  222,

        0,    0,    0,    0,  224,    0,  218,  219,    0,  210,
        0,  223,    0,    0,    0,    0,    0,    0,    0,    0,
      217,    0,    0,    0,    0,    0,    0,    0,    0,  207,
      189,    0,  177,  167,    0,  152,  157,  125,    0,    0,
      123,  113,   80,    0,    0,   71,    0,  444,  287,   80
    } ;

static yyconst flex_int16_t yy_def[351] =
    {   0,
      348,    1,    1,    1,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      349,  348,  348,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      350,  348,  348,  348,  348,  348,  348,  348,  348,  349,
      348,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  350,
      348,  348,  348,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  348,
      348,  348,  348,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,    0,  348,  348
    } ;

static yyconst flex_int16_t yy_nxt[511] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   25,   26,   27,   28,   29,   30,   31,   31,
       31,   31,   31,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   31,   31,   42,   31,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   31,
       54,   55,   56,   57,   58,   59,   63,   65,   69,   67,
       71,   73,   72,   72,   72,   72,   74,  120,   70,   93,
       66,   68,  150,   64,   75,   76,   94,   77,   77,   77,
       77,   76,  121,   77,   77,   77,   77,   98,   78,   79,

       99,   80,   81,   83,   84,   79,   86,   87,   78,   88,
       89,   79,   95,  347,  129,   82,  138,   79,  100,  107,
       80,   82,  103,   96,  104,  101,  108,  102,   81,  130,
       97,  109,  110,  105,  114,  117,  111,  346,  115,  169,
      118,  119,  170,  116,   85,  112,  123,  131,  124,  134,
      135,  132,  125,  161,  139,  146,  146,  162,  126,  149,
      149,  149,  127,  345,  163,  344,  128,   72,   72,   72,
       72,  343,   72,   72,   72,   72,  176,  187,   76,  143,
       77,   77,   77,   77,  145,  205,  177,  172,  194,  206,
      188,  143,   79,  195,  173,  144,  145,  174,  260,  189,

      190,  261,  191,  342,   79,  147,  341,  147,   82,  340,
      148,  148,  148,  148,  192,  211,  223,  211,  146,  146,
      212,  212,  212,  212,  213,  339,  213,  224,  225,  214,
      214,  214,  214,  148,  148,  148,  148,  148,  148,  148,
      148,  149,  149,  149,  338,  337,   82,  212,  212,  212,
      212,  212,  212,  212,  212,  214,  214,  214,  214,  214,
      214,  214,  214,  336,  335,  144,  334,  333,  332,   82,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  144,
      322,  321,  320,  319,  318,  317,  316,  144,   90,   90,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,

      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  222,  221,
      220,  219,  218,  217,  216,  215,   82,  210,  209,  208,
      207,  204,  203,  202,  201,  200,  199,  198,  197,  196,

      193,  186,  185,  184,  183,  182,  181,  180,  179,  178,
      175,  171,  168,  167,  166,  165,  164,  160,  159,  158,
      157,  156,  155,  154,  153,  152,  151,  142,  141,  140,
      137,  136,  133,  122,  113,  106,   92,   91,   62,   61,
      348,   60,   60,    5,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348
    } ;

static yyconst flex_int16_t yy_chk[511] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   13,   17,   20,   18,
       21,   22,   21,   21,   21,   21,   22,   47,   20,   36,
       17,   18,  350,   13,   22,   23,   36,   23,   23,   23,
       23,   24,   47,   24,   24,   24,   24,   38,   23,   23,

       38,   23,   23,   27,   27,   24,   28,   28,   23,   29,
       29,   23,   37,  346,   50,   23,   57,   24,   39,   42,
       23,   24,   40,   37,   40,   39,   42,   39,   23,   50,
       37,   42,   43,   40,   45,   46,   43,  343,   45,  105,
       46,   46,  105,   45,   27,   43,   49,   51,   49,   53,
       53,   51,   49,   99,   57,   78,   78,   99,   49,   80,
       80,   80,   49,  342,   99,  341,   49,   72,   72,   72,
       72,  338,   76,   76,   76,   76,  110,  121,   77,   72,
       77,   77,   77,   77,   76,  134,  110,  108,  124,  134,
      121,   72,   77,  124,  108,   72,   76,  108,  205,  122,

      122,  205,  122,  337,   77,   79,  336,   79,   77,  334,
       79,   79,   79,   79,  122,  143,  163,  143,  146,  146,
      143,  143,  143,  143,  145,  333,  145,  163,  163,  145,
      145,  145,  145,  147,  147,  147,  147,  148,  148,  148,
      148,  149,  149,  149,  331,  330,  146,  211,  211,  211,
      211,  212,  212,  212,  212,  213,  213,  213,  213,  214,
      214,  214,  214,  321,  312,  148,  310,  308,  307,  149,
      305,  300,  299,  298,  297,  296,  295,  294,  293,  212,
      292,  290,  289,  288,  286,  283,  281,  214,  349,  349,
      280,  279,  278,  277,  276,  275,  273,  272,  271,  267,

      265,  264,  262,  261,  259,  255,  254,  253,  252,  251,
      249,  248,  247,  245,  244,  243,  242,  241,  240,  239,
      238,  236,  235,  234,  233,  232,  231,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  208,  207,  206,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  190,  189,  188,  187,  186,
      184,  183,  180,  179,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  162,  161,
      160,  159,  158,  157,  156,  155,  150,  139,  137,  136,
      135,  133,  132,  131,  130,  129,  128,  127,  126,  125,

      123,  120,  119,  118,  116,  115,  114,  113,  112,  111,
      109,  106,  104,  103,  102,  101,  100,   98,   96,   95,
       94,   93,   92,   89,   85,   84,   83,   71,   65,   63,
       55,   54,   52,   48,   44,   41,   35,   34,   12,    9,
        5,    4,    3,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "chapel.lex"
/*
 * Copyright 2004-2015 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#line 27 "chapel.lex"

#include "bison-chapel.h"
#include "parser.h"

#include <cstdio>

//
// Make sure exit is undefined:
//

#ifdef exit
#undef exit
#endif

// And redefine it to call our exit routine:
#define exit(x) clean_exit(x)

static int  processToken(int t);
static int  processStringLiteral(const char* q);
static int  processExtern();
static int  processExternCode();

static void processWhitespace(const char* tabOrSpace);

static void processSingleLineComment();
static void processMultiLineComment();

static void processInvalidToken();


#line 729 "flex-chapel.cpp"

#define INITIAL 0
#define externmode 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 80 "chapel.lex"


#line 913 "flex-chapel.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 349 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 444 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "chapel.lex"
return processToken(TALIGN);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "chapel.lex"
return processToken(TATOMIC);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "chapel.lex"
return processToken(TBEGIN);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "chapel.lex"
return processToken(TBREAK);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "chapel.lex"
return processToken(TBY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "chapel.lex"
return processToken(TCLASS);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "chapel.lex"
return processToken(TCOBEGIN);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "chapel.lex"
return processToken(TCOFORALL);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "chapel.lex"
return processToken(TCONFIG);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "chapel.lex"
return processToken(TCONST);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "chapel.lex"
return processToken(TCONTINUE);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "chapel.lex"
return processToken(TDELETE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "chapel.lex"
return processToken(TDMAPPED);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "chapel.lex"
return processToken(TDO);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "chapel.lex"
return processToken(TDOMAIN);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "chapel.lex"
return processToken(TELSE);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "chapel.lex"
return processToken(TENUM);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 99 "chapel.lex"
return processToken(TEXPORT);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "chapel.lex"
return processExtern();
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "chapel.lex"
return processToken(TFOR);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 102 "chapel.lex"
return processToken(TFORALL);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "chapel.lex"
return processToken(TIF);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 104 "chapel.lex"
return processToken(TIN);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 105 "chapel.lex"
return processToken(TINDEX);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 106 "chapel.lex"
return processToken(TINLINE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 107 "chapel.lex"
return processToken(TINOUT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 108 "chapel.lex"
return processToken(TITER);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 109 "chapel.lex"
return processToken(TLABEL);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 110 "chapel.lex"
return processToken(TLAMBDA);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 111 "chapel.lex"
return processToken(TLET);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 112 "chapel.lex"
return processToken(TLOCAL);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 113 "chapel.lex"
return processToken(TMODULE);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 114 "chapel.lex"
return processToken(TNEW);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 115 "chapel.lex"
return processToken(TNIL);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 116 "chapel.lex"
return processToken(TNOINIT);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 117 "chapel.lex"
return processToken(TON);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 118 "chapel.lex"
return processToken(TOTHERWISE);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 119 "chapel.lex"
return processToken(TOUT);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 120 "chapel.lex"
return processToken(TPARAM);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "chapel.lex"
return processToken(TZIP);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 122 "chapel.lex"
return processToken(TPRAGMA);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 123 "chapel.lex"
return processToken(TPRIMITIVE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 124 "chapel.lex"
return processToken(TPROC);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 125 "chapel.lex"
return processToken(TRECORD);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 126 "chapel.lex"
return processToken(TREDUCE);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 127 "chapel.lex"
return processToken(TREF);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 128 "chapel.lex"
return processToken(TRETURN);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 129 "chapel.lex"
return processToken(TSCAN);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 130 "chapel.lex"
return processToken(TSELECT);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 131 "chapel.lex"
return processToken(TSERIAL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 132 "chapel.lex"
return processToken(TSINGLE);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 133 "chapel.lex"
return processToken(TSPARSE);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 134 "chapel.lex"
return processToken(TSUBDOMAIN);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 135 "chapel.lex"
return processToken(TSYNC);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 136 "chapel.lex"
return processToken(TTHEN);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 137 "chapel.lex"
return processToken(TTYPE);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 138 "chapel.lex"
return processToken(TUNION);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 139 "chapel.lex"
return processToken(TUSE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 140 "chapel.lex"
return processToken(TVAR);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 141 "chapel.lex"
return processToken(TWHEN);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 142 "chapel.lex"
return processToken(TWHERE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 143 "chapel.lex"
return processToken(TWHILE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 144 "chapel.lex"
return processToken(TWITH);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 145 "chapel.lex"
return processToken(TYIELD);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 147 "chapel.lex"
return processToken(TUNDERSCORE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 149 "chapel.lex"
return processToken(TASSIGN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 150 "chapel.lex"
return processToken(TASSIGNPLUS);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 151 "chapel.lex"
return processToken(TASSIGNMINUS);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 152 "chapel.lex"
return processToken(TASSIGNMULTIPLY);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 153 "chapel.lex"
return processToken(TASSIGNDIVIDE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 154 "chapel.lex"
return processToken(TASSIGNEXP);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 155 "chapel.lex"
return processToken(TASSIGNMOD);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 156 "chapel.lex"
return processToken(TASSIGNBAND);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 157 "chapel.lex"
return processToken(TASSIGNBOR);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 158 "chapel.lex"
return processToken(TASSIGNBXOR);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 159 "chapel.lex"
return processToken(TASSIGNLAND);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "chapel.lex"
return processToken(TASSIGNLOR);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 161 "chapel.lex"
return processToken(TASSIGNSL);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 162 "chapel.lex"
return processToken(TASSIGNSR);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 164 "chapel.lex"
return processToken(TALIAS);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 166 "chapel.lex"
return processToken(TSWAP);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 168 "chapel.lex"
return processToken(REALLITERAL);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 170 "chapel.lex"
return processToken(THASH);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 171 "chapel.lex"
return processToken(TDOTDOT);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 172 "chapel.lex"
return processToken(TDOTDOTDOT);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 174 "chapel.lex"
return processToken(TAND);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 175 "chapel.lex"
return processToken(TOR);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 176 "chapel.lex"
return processToken(TNOT);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "chapel.lex"
return processToken(TBAND);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "chapel.lex"
return processToken(TBOR);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "chapel.lex"
return processToken(TBXOR);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "chapel.lex"
return processToken(TBNOT);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 183 "chapel.lex"
return processToken(TSHIFTLEFT);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 184 "chapel.lex"
return processToken(TSHIFTRIGHT);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 186 "chapel.lex"
return processToken(TEQUAL);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 187 "chapel.lex"
return processToken(TNOTEQUAL);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 188 "chapel.lex"
return processToken(TLESSEQUAL);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 189 "chapel.lex"
return processToken(TGREATEREQUAL);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 190 "chapel.lex"
return processToken(TLESS);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 191 "chapel.lex"
return processToken(TGREATER);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 193 "chapel.lex"
return processToken(TPLUS);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 194 "chapel.lex"
return processToken(TMINUS);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 195 "chapel.lex"
return processToken(TSTAR);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 196 "chapel.lex"
return processToken(TDIVIDE);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 197 "chapel.lex"
return processToken(TMOD);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 198 "chapel.lex"
return processToken(TMINUSMINUS);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 199 "chapel.lex"
return processToken(TPLUSPLUS);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 201 "chapel.lex"
return processToken(TEXP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 203 "chapel.lex"
return processToken(TCOLON);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 204 "chapel.lex"
return processToken(TSEMI);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 205 "chapel.lex"
return processToken(TCOMMA);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 206 "chapel.lex"
return processToken(TDOT);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 207 "chapel.lex"
return processToken(TLP);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 208 "chapel.lex"
return processToken(TRP);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 209 "chapel.lex"
return processToken(TLSBR);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 210 "chapel.lex"
return processToken(TRSBR);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 211 "chapel.lex"
return processExternCode();
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 212 "chapel.lex"
return processToken(TLCBR);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 213 "chapel.lex"
return processToken(TRCBR);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "chapel.lex"
return processToken(TIO);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 217 "chapel.lex"
return processToken(TQUESTION);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 219 "chapel.lex"
return processToken(TIDENT);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 220 "chapel.lex"
return processToken(INTLITERAL);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 221 "chapel.lex"
return processToken(IMAGLITERAL);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 222 "chapel.lex"
return processToken(IMAGLITERAL);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 224 "chapel.lex"
return processStringLiteral("\"");
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 225 "chapel.lex"
return processStringLiteral("\'");
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 227 "chapel.lex"
processWhitespace(yytext);
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 228 "chapel.lex"
processNewline();
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 230 "chapel.lex"
processSingleLineComment();
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 232 "chapel.lex"
processMultiLineComment();
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 234 "chapel.lex"
processInvalidToken();
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 236 "chapel.lex"
ECHO;
	YY_BREAK
#line 1662 "flex-chapel.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(externmode):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 349 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 349 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 348);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 236 "chapel.lex"



/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

#include "countTokens.h"
#include "misc.h"
#include "stringutil.h"

#include <cstring>
#include <cctype>
#include <string>

static void  newString();
static void  addString(const char* str);
static void  addChar(char c);
static void  addCharString(char c);
static int   getNextYYChar();

static int   stringBuffLen = 0;
static int   stringLen     = 0;
static char* stringBuffer  = NULL;

void lexerScanString(const char* string) {
  yy_scan_string(string);
}

void lexerResetFile() {
  YY_NEW_FILE;
}

void processNewline() {
  chplLineno++;

  yylloc.first_column = 0;
  yylloc.last_column  = 0;

  yylloc.first_line   = chplLineno;
  yylloc.last_line    = chplLineno;

  countNewline();
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static int processToken(int t) {
  countToken(yytext);

  if (captureTokens) {
    if (t == TASSIGN ||
        t == TDOTDOTDOT)
      strcat(captureString, " ");

    if (t != TLCBR)
      strcat(captureString, yytext);

    if (t == TCOMMA  ||
        t == TPARAM  ||
        t == TZIP    ||
        t == TTYPE   ||
        t == TCONST  ||
        t == TIN     ||
        t == TINOUT  ||
        t == TOUT    ||
        t == TREF    ||
        t == TCOLON  ||
        t == TASSIGN ||
        t == TRSBR)
      strcat(captureString, " ");
  }

  /* processToken means we are parsing Chapel */
  BEGIN(INITIAL);

  return t;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static char* eatStringLiteral(const char* startChar);

static int processStringLiteral(const char* q) {
  yylval.pch = eatStringLiteral(q);

  countToken(astr(q, yylval.pch, q));

  if (captureTokens) {
    strcat(captureString, yytext);
    strcat(captureString, yylval.pch);
    strcat(captureString, yytext);
  }

  /* string literals only in Chapel */
  BEGIN(INITIAL);

  return STRINGLITERAL;
}

static char* eatStringLiteral(const char* startChar) {
  const char startCh = *startChar;
  int        c       = 0;

  newString();

  while ((c = getNextYYChar()) != startCh && c != 0) {
    if (c == '\n') {
      yytext[0] = '\0';
      yyerror("end-of-line in a string literal without a preceeding backslash");
    } else {
      if (startCh == '\'' && c == '\"') {
        addCharString('\\');
      }

      addCharString(c);
    }

    if (c == '\\') {
      c = getNextYYChar();

      if (c == '\n') {
        processNewline();
        addCharString('n');
      } else if (c != 0) {
        addCharString(c);
      }
      else
        break;
    }
  } /* eat up string */

  if (c == 0) {
    yyerror("EOF in string");
  }

  return stringBuffer;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static int processExtern() {
  countToken(yytext);

  if (captureTokens) {
    strcat(captureString, yytext);
  }

  BEGIN(externmode);

  return TEXTERN;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static char* eatExternCode();

// When the lexer calls this function, it has already consumed the first '{'
static int processExternCode() {
  yylval.pch = eatExternCode();

  countToken(astr(yylval.pch));

  if (captureTokens) {
    strcat(captureString, yylval.pch);
  }

  /* only one { } block is special */

  BEGIN(INITIAL);

  return EXTERNCODE;
}

static char* eatExternCode() {
  const int in_code                          = 0;
  const int in_single_quote                  = 1;
  const int in_single_quote_backslash        = 2;
  const int in_double_quote                  = 3;
  const int in_double_quote_backslash        = 4;
  const int in_single_line_comment           = 5;
  const int in_single_line_comment_backslash = 6;
  const int in_multi_line_comment            = 7;

  int       depth                            = 1;
  int       c                                = 0;
  int       lastc                            = 0;
  int       state                            = 0;

  newString();

  // First, store the line information.
  addString("#line ");
  addString(istr(chplLineno));
  addString(" \"");
  addString(yyfilename);
  addString("\" ");
  addString("\n");

  // Now, append the C code until we get to a }.
  while (depth > 0) {
    lastc = c;
    c     = getNextYYChar();

    if (c == 0) {
      switch (state) {
        case in_code:
          // there was no match to the {
          yyerror("Missing } in extern block");
          break;

        case in_single_quote:
        case in_single_quote_backslash:
          yyerror("Runaway \'string\' in extern block");
          break;

        case in_double_quote:
        case in_double_quote_backslash:
          yyerror("Runaway \"string\" in extern block");
          break;

        case in_single_line_comment:
          yyerror("Missing newline after extern block // comment");
          break;

        case in_multi_line_comment:
          yyerror("Runaway /* comment */ in extern block");
          break;
      }
      break;
    }

    addChar(c);

    if (c == '\n')
      processNewline();

    // Now update state (are we in a comment? a string?)
    switch (state) {
      case in_code:
        if (c == '\'')
          state = in_single_quote;

        else if (c == '"')
          state = in_double_quote;

        else if (lastc == '/' && c == '/')
          state = in_single_line_comment;

        else if (lastc == '/' && c == '*')
          state = in_multi_line_comment;

        else if (c == '{' )
          depth++;

        else if (c == '}' )
          depth--;

        break;

      case in_single_quote:
        if (c == '\\')
          state = in_single_quote_backslash;

        else if (c == '\'')
          state = in_code;

        break;

      case in_single_quote_backslash:
        state = in_single_quote;
        break;

      case in_double_quote:
        if (c == '\\')
          state = in_double_quote_backslash;

        else if ( c == '"')
          state = in_code;

        break;

      case in_double_quote_backslash:
        state = in_double_quote;
        break;

      case in_single_line_comment:
        if (c == '\n')
          state = in_code;
        break;

      case in_single_line_comment_backslash:
        if (c == ' ' || c == '\t' || c == '\n')
          state = in_single_line_comment_backslash;

        else
          state = in_single_line_comment;

        break;

      case in_multi_line_comment:
        if( lastc == '*' && c == '/' ) state = in_code;
        break;
    }
  }

  //save the C String
  //eliminate the final '{'
  if (stringLen >=1) stringLen -= 1;
  stringBuffer[stringLen] = '\0';

  return stringBuffer;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processWhitespace(const char* tabOrSpace) {
  // might eventually want to keep track of column numbers and do
  // something here
}


/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processSingleLineComment() {
  int c;

  newString();

  countCommentLine();

  while (1) {
    while ( (c = getNextYYChar()) != '\n' && c != 0) {
      addChar(c);
    }    /* eat up text of comment */

    countSingleLineComment(stringBuffer);

    if (c != 0) {
      processNewline();
    }

    break;
  }
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processMultiLineComment() {
  int         c            = 0;
  int         lastc        = 0;
  int         depth        = 1;
  int         labelIndex   = 0;
  int         len          = 0;
  std::string wholeComment = "";

  newString();
  countCommentLine();

  len = strlen(fDocsCommentLabel);

  if (len >= 2) {
    labelIndex = 2;
  }

  while (depth > 0) {
    int lastlastc = lastc;

    lastc = c;
    c     = getNextYYChar();

    if (c == '\n') {
      countMultiLineComment(stringBuffer);
      processNewline();

      if (fDocs && labelIndex == len) {
        wholeComment += stringBuffer;
        wholeComment += '\n';
      }

      newString();

      countCommentLine();
    } else {
      if ((labelIndex < len) && (labelIndex != -1)) {
        if (c == fDocsCommentLabel[labelIndex]) {
          labelIndex++;
        } else {
          labelIndex = -1;
        }
      }

      addChar(c);
    }

    if (lastc == '*' && c == '/' && lastlastc != '/') { // close comment
      depth--;

    } else if (lastc == '/' && c == '*') { // start nested
      depth++;
    } else if (c == 0) {
      yyerror( "EOF in comment" );
    }
  }

  // back up two to not print */ again.
  if (stringLen >= 2)
    stringLen -= 2;

  // back up further if the user has specified a special form of commenting
  if (len > 2 && labelIndex == len)
    stringLen -= (len - 2);

  stringBuffer[stringLen] = '\0';

  // Saves the comment grabbed to the comment field of the location struct,
  // for use when the --docs flag is implemented
  if (fDocs && labelIndex == len) {
    wholeComment += stringBuffer;

    if (len > 2) {
      len          = len - 2;
      wholeComment = wholeComment.substr(len);
    }

    // Also, only need to fix indentation failure when the comment matters
    size_t location = wholeComment.find("\\x09");

    while (location != std::string::npos) {
      wholeComment = wholeComment.substr(0, location) + wholeComment.substr(location + 4);

      wholeComment.insert(location, "\t");

      location = wholeComment.find("\\x09");
    }

    yylloc.comment = (char*) astr(wholeComment.c_str());
  }

  countMultiLineComment(stringBuffer);

  newString();
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processInvalidToken() {
  yyerror("Invalid token");
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void addCharMaybeEscape(char c, bool canEscape);
static char toHex(char c);

static void newString() {
  stringLen = 0;

  if (stringBuffLen) {
    stringBuffer[stringLen] = '\0';
  }
}

static void addString(const char* str) {
  for (int i = 0; str[i]; i++)
    addChar(str[i]);
}

static void addChar(char c) {
  addCharMaybeEscape(c, false);
}

static void addCharString(char c) {
  addCharMaybeEscape(c, true);
}

static void addCharMaybeEscape(char c, bool canEscape) {
  int escape  = canEscape && !(isascii(c) && isprint(c));
  int charlen = escape ? 4 : 1; // convert nonasci to \xNN

  if (stringLen + charlen + 1 > stringBuffLen) {
    stringBuffLen = 2*(stringBuffLen + charlen);
    stringBuffer  = (char*) realloc(stringBuffer,
                                    stringBuffLen * sizeof(char));
  }

  if (escape) {
    stringBuffer[stringLen++] = '\\';
    stringBuffer[stringLen++] = 'x';
    stringBuffer[stringLen++] = toHex(((unsigned char)c) >> 4);
    stringBuffer[stringLen++] = toHex(c & 0xf);
  } else {
    stringBuffer[stringLen++] = c;
  }

  stringBuffer[stringLen] = '\0';
}

// Returns the hexadecimal character for 0-16.
static char toHex(char c) {
  return (0 <= c && c <= 9) ? '0' + c : 'A' + (c - 10);
}

static int getNextYYChar() {
  int retval = yyinput();

  if (retval == EOF) {
    retval = 0;
  }

  return retval;
}


